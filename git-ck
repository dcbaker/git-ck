#!/usr/bin/ruby

# Simple function to save wip on branches and uncheck it out on return
# Copyright Â© 2015 Dylan Baker
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

# Provides a simple wrapper around git checkout that saves and restores work in
# progress.
#
# When one calls git-ck on a branch with staged code, git-ck will commit that
# as a commit called 'git-ck: staged'. When one calls git-ck on a branch with
# unstaged code git-ck will commit that as 'git-ck: unstaged'.

STATUS = `git status`

# The maximum number of commits git-ck will manage
MANAGED_COMMIT_COUNT = 2

def check_staged
  return STATUS.include?('Changes to be committed:')
end

def check_unstaged
  return STATUS.include?('Changes not staged for commit:')
end

def commit_staged
  `git commit --message 'git-ck: staged'`
end

def commit_unstaged
  `git commit --all --message 'git-ck: unstaged'`
end

def check_unstaged_commit(log)
  return !!(/git-ck: unstaged/ =~ log)
end

def check_staged_commit(log)
  return !!(/git-ck: staged/ =~ log)
end

# This is a little more complicated than making the initial commits. What's
# happening is that the unstaged changes are uncommited, then stashed. Then
# the staged changes are uncommited and staged. Finally the unstaged changes
# are poped from the stash
def uncommit
  log = `git log -#{MANAGED_COMMIT_COUNT}`.split(/\n/)
  log.each do |commit|
    if check_unstaged_commit(commit)
      `git reset HEAD~`
      `git stash`
    end

    if check_staged_commit(commit)
      `git reset HEAD~`
      `git add --update`  # This wil not add untracked files
    end
  end
end

def main
  commit_staged if check_staged
  commit_unstaged if check_unstaged
  `git checkout #{ARGV.join(' ')}`
  uncommit
end

main if __FILE__ == $PROGRAM_NAME
